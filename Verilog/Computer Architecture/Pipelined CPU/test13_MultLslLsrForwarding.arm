// Test of MUL, LSL, and LSR instructions.
// Requires:
// MUL, LSL, LSR, ADDI & B instructions
// Expected results (HEX):
// X0 = 0xFAB	     = 4011
// X1 = 0xFAB000     = 16429056
// X2 = 0xFAB00      = 1026816
// X3 = 0xFAB0	     = 64176
// X4 = 0xFAB 	     = 4011
// X5 = 0xF57C390    = 257409936
// X6 =	0xF064151130 = 1032471253296
// X7 = 0xF57C39     = 16088121

//ADDI: I-type, Reg[Rd] = Reg[Rn] + {'0, Imm12}
//OP         Imm12        Rn    Rd
//3322222222 221111111111 00000 00000
//1098765432 109876543210 98765 43210
//1001000100 Unsigned     0..31 0..31

//B: B-type, PC = PC + SignExtend({Imm26, 2'b00})
//OP     Imm26
//332222 22222211111111110000000000
//109876 54321098765432109876543210
//000101 2's Comp Imm26

//LSL: R-type, Reg[Rd] = Reg[Rn] << shamt
//OP          Rm    Shamt  Rn    Rd
//33222222222 21111 111111 00000 00000
//10987654321 09876 543210 98765 43210
//11010011011 00000 0...63 0..31 0..31

//LSR: R-type, Reg[Rd] = Reg[Rn] >> shamt (no sign extend)
//OP          Rm    Shamt  Rn    Rd
//33222222222 21111 111111 00000 00000
//10987654321 09876 543210 98765 43210
//11010011010 00000 0...63 0..31 0..31

//MUL: R-type, Reg[Rd] = (Reg[Rn] * Reg[Rm])[63:0]
//OP          Rm    Shamt  Rn    Rd
//33222222222 21111 111111 00000 00000
//10987654321 09876 543210 98765 43210
//10011011000 0..31 011111 0..31 0..31

            // MAIN:
1001000100_111110101011_11111_00000	// ADDI X0, X31, #4011	// Set X0 = 2989 0xFAB
1001000100_000000000000_11111_11111	// ADDI X31, X31, #0	// NOOP
11010011011_00000_001100_00000_00001	// LSL X1, X0, #12	// X1 = X0 << 12 0xFAB000 Fwrd A (MEM)
11010011010_00000_000100_00001_00010	// LSR X2, X1, #4	// X2 = X1 >> 4  0xFAB00  Fwrd A (EX)
11010011010_00000_001000_00001_00011	// LSR X3, X1, #8	// X3 = X1 >> 8  0xFAB0   Fwrd A (MEM)
11010011010_00000_001000_00010_00100	// LSR X4, X2, #8	// X4 = X2 >> 8  0xFAB    Fwrd A (MEM)
10011011000_00100_011111_00011_00101	// MUL X5, X3, X4	// X5 = X3 * X4  Fwrd A (MEM) and Fwrd B (EX)
10011011000_00100_011111_00101_00110	// MUL X6, X5, X4	// X6 = X5 * X4  Fwrd A (EX) and Fwrd B (MEM)
10011011000_00000_011111_00000_00111	// MUL X7, X0, X0	// X7 = X0 * X0  4011 * 4011 = 0xF57C39
000101_00000000000000000000000000	// HALT:B HALT          // (HALT = 0)
1001000100_000000000000_11111_11111	// ADDI X31, X31, #0    // NOOP